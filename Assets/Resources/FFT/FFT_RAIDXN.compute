// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel FFT

#pragma multi_compile_local  __ VERTICAL

#pragma multi_compile_local __ HAFT_PRECISION
#pragma multi_compile_local SIZE_256 SIZE_512 SIZE_1024 SIZE_2048 SIZE_16
#pragma multi_compile_local __ INVERSE
#pragma multi_compile_local __ INOUT_TARGET

#ifdef INVERSE
#define inv_sign +
#else
#define inv_sign -
#endif

#if   defined SIZE_2048
    #define SIZE 2048
    #define FFT_PASSES PASS_LOOP(R2_PASS, 11)
    #define MAX_RADIX 2
    #define MIN_RADIX 2
#elif defined SIZE_1024
    #define SIZE 1024
    // #define FFT_PASSES PASS_LOOP(RP2_PASS(32),2)
    // #define MAX_RADIX 32
    // #define MIN_RADIX 32
    // #define FFT_PASSES PASS_LOOP(RP2_PASS(16),2) R4_PASS
    // #define MAX_RADIX 16
    // #define MIN_RADIX 4
    #define FFT_PASSES PASS_LOOP(RP2_PASS(8),3) R2_PASS
    #define MAX_RADIX 8
    #define MIN_RADIX 2
    // #define FFT_PASSES PASS_LOOP(R4_PASS, 5)
    // #define MAX_RADIX 4
    // #define MIN_RADIX 4
    // #define FFT_PASSES PASS_LOOP(RP2_PASS(4), 5)
    // #define MAX_RADIX 4
    // #define MIN_RADIX 4
    // #define FFT_PASSES PASS_LOOP(RN_PASS(4), 5)
    // #define MAX_RADIX 4
    // #define MIN_RADIX 4
    // #define FFT_PASSES PASS_LOOP(R2_PASS, 10)
    // #define MAX_RADIX 2
    // #define MIN_RADIX 2
#elif defined SIZE_512
    #define SIZE 512
    #define FFT_PASSES PASS_LOOP(RP2_PASS(8),3) 
    #define MAX_RADIX 8
    #define MIN_RADIX 8
    // #define FFT_PASSES PASS_LOOP(R2_PASS, 9)
    // #define MAX_RADIX 2
    // #define MIN_RADIX 2
#elif defined SIZE_16
    #define SIZE 16
    #define FFT_PASSES PASS_LOOP(R2_PASS, 4)
    #define MAX_RADIX 4
    #define MIN_RADIX 4
#else
#define SIZE 256
#define FFT_PASSES PASS_LOOP(R2_PASS, 8)
#define MAX_RADIX 2
#define MIN_RADIX 2
#endif
#define MAX_S (SIZE/MIN_RADIX)

#ifndef INOUT_TARGET
Texture2D<float4> Source;
#define SOURCE Source
#else
#define SOURCE Target
#endif
RWTexture2D<float4> Target;


#ifdef HAFT_PRECISION
groupshared half4 buffer[2][SIZE];
#else
groupshared float4 buffer[2][SIZE];
#endif


static const float PI = 3.14159265f;

float2 cmul(float2 a, float2 b)
{
    return float2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

float4 cmul(float2 a, float4 b)
{
    return float4(cmul(a, b.xy), cmul(a, b.zw));
}

float2 cmuli(float2 a)
{
    return float2(- a.y, a.x);
}

float4 cmuli(float4 a)
{
    return float4(- a.y, a.x, -a.w, a.z);
}

//return a*b and a*conj(b)
float4 cconjmul(float2 a, float2 b)
{
    float v0 = a.x * b.x;
    float v1 = a.y * b.y;
    float v2 = a.x * b.y;
    float v3 = a.y * b.x;
    return float4(v0 - v1, v2 + v3, v0 + v1, -v2 + v3);
}

uint fast_mul(uint a, uint log2_b)
{
    return a << log2_b;
}

uint fast_div(uint a, uint log2_b)
{
    return a >> log2_b;
}

// b must be power of 2
uint fast_mod(uint a, uint b)
{
    return a & (b - 1);
}

uint ceil_div(uint a, uint b)
{
    return (a + b - 1) / b;
}


#define PASS_LOOP(PASS, COUNT) for (_ = 0; _ < COUNT; _++) { PASS };

#define R2_PASS P/=2; R2_Pass(i, wt, P); wt = !wt;

void R2_Pass(uint i, bool wt, uint P)
{
    uint k = i / P;
    uint p = i % P;
    uint kP = k * P;
    uint kP2 = kP * 2;
    uint src_0 = kP2 + p;
    uint src_1 = kP2 + p + P;
    uint dst_0 = i;
    uint dst_1 = i + SIZE / 2;

    float phi = inv_sign(2 * PI) / SIZE * kP;
    float2 W;
    sincos(phi, W.y, W.x);

    float4 v_0 = buffer[!wt][src_0];
    float4 v_1 = buffer[!wt][src_1];
    float4 ev = float4(cmul(W, v_1.xy), cmul(W, v_1.zw));
    buffer[wt][dst_0] = v_0 + ev;
    buffer[wt][dst_1] = v_0 - ev;
    GroupMemoryBarrierWithGroupSync();
}

#define R4_PASS log2_P -= 2; P/=4; R4_Pass(i, wt, P); wt = !wt;

void R4_Pass(uint i, bool wt, uint P)
{
    uint S = SIZE / 4;
    if (i < S)
    {
        uint k = i / P;
        uint p = i % P;
        uint kP = k * P;

        uint kPR = kP * 4;
        uint temp = kPR + p;

        float4 src_var[4];
        uint dst[4];
        uint r;
        for (r = 0; r < 4; r++)
        {
            src_var[r] = buffer[!wt][temp + r * P];
            dst[r] = i + r * S;
        }
        for (r = 1; r < 4; r++)
        {
            float phi = inv_sign(2 * PI) / SIZE * (kP * r);
            float2 W;
            sincos(phi, W.y, W.x);
            src_var[r] = float4(cmul(src_var[r].xy, W), cmul(src_var[r].zw, W));
        }
        buffer[wt][dst[0]] = src_var[0] + src_var[2] + src_var[1] + src_var[3];
        buffer[wt][dst[1]] = src_var[0] - src_var[2] inv_sign cmuli(src_var[1]) inv_sign -cmuli(src_var[3]);
        buffer[wt][dst[2]] = src_var[0] + src_var[2] - src_var[1] - src_var[3];
        buffer[wt][dst[3]] = src_var[0] - src_var[2] inv_sign -cmuli(src_var[1]) inv_sign cmuli(src_var[3]);
        // this only optimized for 0.003 ms fuck me
        // float4 f0 = src_var[0] + src_var[2];
        // float4 f1 =  src_var[1]  + src_var[3];
        // float4 f3 = src_var[0] - src_var[2];
        // float4 f4 = inv_sign  cmuli(src_var[1]) inv_sign -cmuli(src_var[3]);
        // buffer[wt][dst[0]] = f0 + f1;
        // buffer[wt][dst[1]] =  f3 + f4;
        // buffer[wt][dst[2]] = f0 - f1;
        // buffer[wt][dst[3]] = f3 - f4;
    }
    GroupMemoryBarrierWithGroupSync();
}

#define SUBPASS(R_) sP/=R_; R##R_##_Subpass(subBuffer, swt, sP, k, SIZE, P, R); swt = !swt;

void R2_Subpass(inout float4 subBuffer[2][MAX_RADIX], bool wt, uint P, uint k_, uint N_, uint P_, uint R_)
{
    uint N = R_;
    uint S = N / 2;
    for (uint i = 0; i < S; i++)
    {
        uint k = i / P;
        uint p = i % P;
        uint kP = k * P;
        uint kP2 = kP * 2;
        uint src_0 = kP2 + p;
        uint src_1 = kP2 + p + P;
        uint dst_0 = i;
        uint dst_1 = i + S;

        float phi = inv_sign(2 * PI) * (kP / (float)N + k_ * P_ * P / (float)N_);
        float2 W;
        sincos(phi, W.y, W.x);
        float4 v_0 = subBuffer[!wt][src_0];
        float4 v_1 = subBuffer[!wt][src_1];
        float4 ev = float4(cmul(W, v_1.xy), cmul(W, v_1.zw));
        subBuffer[wt][dst_0] = v_0 + ev;
        subBuffer[wt][dst_1] = v_0 - ev;
    }
}

void R4_Subpass(inout float4 subBuffer[2][MAX_RADIX], bool wt, uint P, uint k_, uint N_, uint P_, uint R_)
{
    uint N = R_;
    uint S = R_ / 4;
    for (uint i = 0; i < S; i++)
    {
        uint k = i / P;
        uint p = i % P;
        uint kP = k * P;

        uint kPR = kP * 4;
        uint temp = kPR + p;

        uint src[4];
        #define src_var(r_) subBuffer[!wt][src[r_]]
        uint dst[4];
        uint r;
        for (r = 0; r < 4; r++)
        {
            src[r] = temp + r * P;
            dst[r] = i + r * S;
        }
        for (r = 1; r < 4; r++)
        {
            float phi = inv_sign(2 * PI) * (kP * r / (float)N + k_ * P_ * r * P / (float)N_);
            float2 W;
            sincos(phi, W.y, W.x);
            src_var(r) = float4(cmul(src_var(r).xy, W), cmul(src_var(r).zw, W));
        }
        subBuffer[wt][dst[0]] = src_var(0) + src_var(2) + src_var(1) + src_var(3);
        subBuffer[wt][dst[1]] = src_var(0) - src_var(2) inv_sign cmuli(src_var(1)) inv_sign -cmuli(src_var(3));
        subBuffer[wt][dst[2]] = src_var(0) + src_var(2) - src_var(1) - src_var(3);
        subBuffer[wt][dst[3]] = src_var(0) - src_var(2) inv_sign -cmuli(src_var(1)) inv_sign cmuli(src_var(3));
    }
}

#define RP2_PASS(R) P /= R; RP2_Pass(i, wt, P, R); wt = !wt;

void RP2_Pass(uint i, bool wt, uint P, uint R)
{
    uint S = SIZE / R;
    if (i < S)
    {
        uint k = i / P;
        uint p = i % P;
        uint kP = k * P;
        uint kPR = kP * R;
        uint temp = kPR + p;

        bool swt = 0;
        float4 subBuffer[2][MAX_RADIX];
        uint dst[MAX_RADIX];

        for (uint r = 0; r < R; r++)
        {
            subBuffer[swt][r] = buffer[!wt][temp + r * P];
            subBuffer[!swt][r] = 0;
            dst[r] = i + r * S;
        }
        swt = !swt;

        uint sP = R;
        for (int _ = log2(R)-1; _ >= 0; _-=1)
        {
            SUBPASS(2);
        }

        for (uint t = 0; t < R; t++)
        {
            buffer[wt][dst[t]] = subBuffer[!swt][t];
        }
    }
    GroupMemoryBarrierWithGroupSync();
}

void RN_Subpass(inout float4 x[MAX_RADIX], uint k_, uint N_, uint P_, uint R_)
{
    float4 subBuffer[2][MAX_RADIX];
    bool wt = 0;

    uint N = R_;
    uint P = N;
    #define SUBPASS_RADIX 2
    uint R = SUBPASS_RADIX;
    uint r;
    for (r = 0; r < N; r++)
    {
        subBuffer[wt][r] = x[r];
    }
    wt = !wt;

    while (P > 1)
    {
        P /= R;
        uint S = N / R;
        for (uint i = 0; i < S; i++)
        {
            uint k = i / P;
            uint p = i % P;
            uint kP = k * P;
            uint kPR = kP * R;
            uint temp = kPR + p;
            float4 src_val[SUBPASS_RADIX];
            uint dst[SUBPASS_RADIX];

            for (r = 0; r < R; r++)
            {
                src_val[r] = subBuffer[!wt][temp + r * P];
                dst[r] = i + r * S;
            }

            for (r = 1; r < R; r++)
            {
                float phi = inv_sign(2 * PI) * (kP * r / (float)N + k_ * P_ * r * P / (float)N_);
                float2 W;
                sincos(phi, W.y, W.x);
                src_val[r] = float4(cmul(src_val[r].xy, W), cmul(src_val[r].zw, W));
            }

            float4 res = src_val[0];
            for (r = 1; r < R; r++)
            {
                res += src_val[r];
            }
            subBuffer[wt][dst[0]] = res;
            uint t_loop_count = R / 2 + 1;
            for (uint t = 1; t < t_loop_count; t++)
            {
                float4 res1 = src_val[0];
                float4 res2 = src_val[0];
                for (r = 1; r < R; r++)
                {
                    float phi = inv_sign(2 * PI) / R * (r * t);
                    float2 W;
                    sincos(phi, W.y, W.x);
                    float4 val = src_val[r];
                    float4 mul1 = cconjmul(val.xy, W);
                    float4 mul2 = cconjmul(val.zw, W);
                    res1 += float4(mul1.xy, mul2.xy);
                    res2 += float4(mul1.zw, mul2.zw); //conj part
                }
                subBuffer[wt][dst[t]] = res1;
                subBuffer[wt][dst[R - t]] = res2;
            }
        }
        wt = !wt;
    }

    for (r = 0; r < N; r++)
    {
        x[r] = subBuffer[!wt][r];
    }
}

#define RN_PASS(R) P /= R; RN_Pass(i, wt, P, R); wt = !wt;

void RN_Pass(uint i, bool wt, uint P, uint R)
{
    uint S = SIZE / R;
    if (i < S)
    {
        uint k = i / P;
        uint p = i % P;
        uint kP = k * P;
        uint kPR = kP * R;
        uint temp = kPR + p;
        float4 src_val[MAX_RADIX];
        uint dst[MAX_RADIX];

        uint r;

        for (r = 0; r < R; r++)
        {
            src_val[r] = buffer[!wt][temp + r * P];
            dst[r] = i + r * S;
        }

        for (r = 1; r < R; r++)
        {
            float phi = inv_sign(2 * PI) / SIZE * (kP * r);
            float2 W;
            sincos(phi, W.y, W.x);
            src_val[r] = float4(cmul(src_val[r].xy, W), cmul(src_val[r].zw, W));
        }

        float4 res = src_val[0];
        for (r = 1; r < R; r++)
        {
            res += src_val[r];
        }
        buffer[wt][dst[0]] = res;
        uint t_loop_count = R / 2 + 1;
        for (uint t = 1; t < t_loop_count; t++)
        {
            float4 res1 = src_val[0];
            float4 res2 = src_val[0];
            for (r = 1; r < R; r++)
            {
                float phi = inv_sign(2 * PI) / R * (r * t);
                float2 W;
                sincos(phi, W.y, W.x);
                float4 val = src_val[r];
                float4 mul1 = cconjmul(val.xy, W);
                float4 mul2 = cconjmul(val.zw, W);
                res1 += float4(mul1.xy, mul2.xy);
                res2 += float4(mul1.zw, mul2.zw); //conj part
            }
            buffer[wt][dst[t]] = res1;
            buffer[wt][dst[R - t]] = res2;
        }
    }
    GroupMemoryBarrierWithGroupSync();
}


[numthreads(MAX_S, 1, 1)]
void FFT(uint3 id : SV_DispatchThreadID)
{
    const uint i = id.x;
    uint2 index[MIN_RADIX];
    uint r;

    [unroll(MIN_RADIX)]
    for (r = 0; r < MIN_RADIX; r++)
    {
        #ifdef VERTICAL
        index[r] = id.yx + uint2(0, r * MAX_S);
        #else
        index[r] = id.xy + uint2(r * MAX_S, 0);
        #endif
    }

    bool wt = 0;
    for (r = 0; r < MIN_RADIX; r++)
        buffer[wt][i + r * MAX_S] = SOURCE[index[r]];
    wt = !wt;
    GroupMemoryBarrierWithGroupSync();

    uint P = SIZE;
    uint log2_P = log2(SIZE);
    uint _ = 0;
    FFT_PASSES

    [unroll(MIN_RADIX)]
    for (r = 0; r < MIN_RADIX; r++)
    {
        #ifdef HAFT_PRECISION
        // this is not DTF and IDTF transfrom,
        // the scaler is swapped in DTF and IDTF for using haft precision
        #ifdef INVERSE
        #define SCALE_FACTOR
        #else
        #define SCALE_FACTOR *(1.0f/SIZE);
        #endif
        #else
        // DTF and IDTF transfrom
        #ifdef INVERSE
        #define SCALE_FACTOR *(1.0f/SIZE);
        #else
        #define SCALE_FACTOR
        #endif
        #endif

        Target[index[r]] = buffer[!wt][i + r * MAX_S] SCALE_FACTOR;
    }
}
